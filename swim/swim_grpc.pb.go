// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package swim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwimClient is the client API for Swim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwimClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	SecondaryPing(ctx context.Context, in *SecondaryPingRequest, opts ...grpc.CallOption) (*SecondaryPingResponse, error)
	AddNode(ctx context.Context, in *NodeAdditionRequest, opts ...grpc.CallOption) (*NodeAdditionResponse, error)
	RemoveNode(ctx context.Context, in *NodeRemovalRequest, opts ...grpc.CallOption) (*NodeRemovalResponse, error)
	SuspectNode(ctx context.Context, in *SuspectNodeRequest, opts ...grpc.CallOption) (*SuspectNodeResponse, error)
	DeadNode(ctx context.Context, in *DeadNodeRequest, opts ...grpc.CallOption) (*DeadNodeResponse, error)
}

type swimClient struct {
	cc grpc.ClientConnInterface
}

func NewSwimClient(cc grpc.ClientConnInterface) SwimClient {
	return &swimClient{cc}
}

func (c *swimClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimClient) SecondaryPing(ctx context.Context, in *SecondaryPingRequest, opts ...grpc.CallOption) (*SecondaryPingResponse, error) {
	out := new(SecondaryPingResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/SecondaryPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimClient) AddNode(ctx context.Context, in *NodeAdditionRequest, opts ...grpc.CallOption) (*NodeAdditionResponse, error) {
	out := new(NodeAdditionResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimClient) RemoveNode(ctx context.Context, in *NodeRemovalRequest, opts ...grpc.CallOption) (*NodeRemovalResponse, error) {
	out := new(NodeRemovalResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimClient) SuspectNode(ctx context.Context, in *SuspectNodeRequest, opts ...grpc.CallOption) (*SuspectNodeResponse, error) {
	out := new(SuspectNodeResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/SuspectNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swimClient) DeadNode(ctx context.Context, in *DeadNodeRequest, opts ...grpc.CallOption) (*DeadNodeResponse, error) {
	out := new(DeadNodeResponse)
	err := c.cc.Invoke(ctx, "/swim.Swim/DeadNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwimServer is the server API for Swim service.
// All implementations must embed UnimplementedSwimServer
// for forward compatibility
type SwimServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	SecondaryPing(context.Context, *SecondaryPingRequest) (*SecondaryPingResponse, error)
	AddNode(context.Context, *NodeAdditionRequest) (*NodeAdditionResponse, error)
	RemoveNode(context.Context, *NodeRemovalRequest) (*NodeRemovalResponse, error)
	SuspectNode(context.Context, *SuspectNodeRequest) (*SuspectNodeResponse, error)
	DeadNode(context.Context, *DeadNodeRequest) (*DeadNodeResponse, error)
	mustEmbedUnimplementedSwimServer()
}

// UnimplementedSwimServer must be embedded to have forward compatible implementations.
type UnimplementedSwimServer struct {
}

func (UnimplementedSwimServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedSwimServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSwimServer) SecondaryPing(context.Context, *SecondaryPingRequest) (*SecondaryPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecondaryPing not implemented")
}
func (UnimplementedSwimServer) AddNode(context.Context, *NodeAdditionRequest) (*NodeAdditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedSwimServer) RemoveNode(context.Context, *NodeRemovalRequest) (*NodeRemovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedSwimServer) SuspectNode(context.Context, *SuspectNodeRequest) (*SuspectNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspectNode not implemented")
}
func (UnimplementedSwimServer) DeadNode(context.Context, *DeadNodeRequest) (*DeadNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeadNode not implemented")
}
func (UnimplementedSwimServer) mustEmbedUnimplementedSwimServer() {}

// UnsafeSwimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwimServer will
// result in compilation errors.
type UnsafeSwimServer interface {
	mustEmbedUnimplementedSwimServer()
}

func RegisterSwimServer(s grpc.ServiceRegistrar, srv SwimServer) {
	s.RegisterService(&Swim_ServiceDesc, srv)
}

func _Swim_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swim_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swim_SecondaryPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecondaryPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).SecondaryPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/SecondaryPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).SecondaryPing(ctx, req.(*SecondaryPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swim_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAdditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).AddNode(ctx, req.(*NodeAdditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swim_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).RemoveNode(ctx, req.(*NodeRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swim_SuspectNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspectNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).SuspectNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/SuspectNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).SuspectNode(ctx, req.(*SuspectNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swim_DeadNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeadNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwimServer).DeadNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swim.Swim/DeadNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwimServer).DeadNode(ctx, req.(*DeadNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Swim_ServiceDesc is the grpc.ServiceDesc for Swim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swim.Swim",
	HandlerType: (*SwimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Swim_Join_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Swim_Ping_Handler,
		},
		{
			MethodName: "SecondaryPing",
			Handler:    _Swim_SecondaryPing_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _Swim_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Swim_RemoveNode_Handler,
		},
		{
			MethodName: "SuspectNode",
			Handler:    _Swim_SuspectNode_Handler,
		},
		{
			MethodName: "DeadNode",
			Handler:    _Swim_DeadNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swim.proto",
}
